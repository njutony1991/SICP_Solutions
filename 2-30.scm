(define (square-list-1 tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (* tree tree))
        (else (cons (square-list-1 (car tree)) 
        	        (square-list-1 (cdr tree))) 
        )
  )
)

(define (square-list-2 tree)
   (map (lambda (subtree)
   		 	(cond ((null? subtree) '())
   		    	  ((not (pair? subtree)) (* subtree subtree))
   		     	  (else
   		     	  	(square-list-2 subtree)
   		     	  )
   		 	)
   		)
	tree)
)