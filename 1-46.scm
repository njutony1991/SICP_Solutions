(define (iterative-improve good-enough improve)
  
  (define (iter x)
    (let ((next (improve x)))
    	 (if (good-enough x next)
       	     next
       	     (iter next)
       	 )
    )
  )

  (lambda (guess) 
  	(iter guess)
  )
)

(define (new_sqrt n)
   (define dx 0.00001) 
   (define (good-enough guess next)
        (< (abs (- guess next)) dx))
   (define (improve guess)
        (average guess (/ n guess)))
   (define (average x y)
        (/ (+ x y) 2.0))
   ((iterative-improve good-enough improve) 1)
)

(define (new_fixed_point f firstguess)
   (define dx 0.0001)
   (define (good-enough v1 v2)
      (< (abs (- v1 v2)) dx)
   )
   (define (improve v1)
      (average (f v1) v1)
   )
   (define (average v1 v2)
      (/ (+ v1 v2) 2.0)
   )
   ((iterative-improve good-enough improve) firstguess)
)
