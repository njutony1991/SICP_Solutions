(define (make-rat n d)
  	(cond ((and (> 0 n) (> 0 d)) 
  			(let ((g (gcd (- n) (- d))))
  				(cons (/ (- n) g) (/ (- d) g))
  			)
  		  )
  	      ((and (> n 0) (> d 0))
  	      	(let ((g (gcd n d)))
  	      		(cons (/ n g) (/ d g))
  	      	)
  	      )
  	      ((and (> 0 n) (> d 0))
  	      	 (let ((g (gcd (- n) d)))
  	      	 	(cons (/ n g) (/ d g))
  	      	 )
  	      )
  	      ((and (> n 0) (> 0 d))
  	      	 (let ((g (gcd n (- d))))
  	      	 	(cons (/ (- n) g) (/ (- d) g))
  	      	 )
  	      )
    )
)

(define (gcd n d)
  (if (= d 0)
      n
      (gcd d (remainder n d))
  )
)

(define (numer x)
  (car x)
)

(define (denom x)
  (cdr x)
)

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x))
)